GDTR : table globale (kernel) référençant les descripteurs de segments
LDTR : table locale (apps) référençant les descripteurs de segments


Pagination : 
quand on fait un malloc  : 
x = malloc(10)


la MMU (memory management unit) servira à mettre en place la correspondance adresse physique/adresse virtuelle

espace d'adressage : va donner l'impression à chaque application qu'elle utilise toute la RAM

	___Firefox____                  ____Chrome___
       0|  |     |lib|4Go	       0| |      |lib|4Go
	''''''''''''''                  '''''''''''''
	|  \	   \\			/  \	//
	|   \ 	    \\		       /    \  //
	|    \       \\        =================
	|     \_ ,    \\      //      /       |
	|--------|-----|--------|----|--------|-|
	|firefox |     | libxml |    | Chrome | |
	|--------|-----|--------|----|------- |-|
			    ^
			partagé

Très bien pour des zones de mémoires multiprocess, partagées, libs ...
Les tables de pages permettent de faire la correspondance @virtuelle/@réelle

CR3 (registre de contrôle 3) contient l'adresse du PageDirectory (1024 entrées de 4 octets chacunes, donc 4Ko)
Chaque entrée référence une autre table, PageTable, qui a aussi 1024 entrées qui chacunes font 4 octets, ce qui nous donne 4Ko)
Chaque entrée de la table de page définit une PageTableEntry, qui est une valeur sur 4 octets qui code une partie de config et une adresse physique de page de 4Ko.

Chaque adresse virtuelle fait 32 bits et est découpée en 3 parties :

[       10 bits        |      10 bits        |         12 bits     ]
(index page directory)  (index page table)    (offset dans la page)
 ^ 10 = 1024 entrées    2 ^ 10 = 1024 entrées  2 ^ 12 = 4096 (4Ko)

Bit U/S (User/Superviser) : 1 = User (Ring 3), 0 = Superviseur (Ring 0,1 ou 2)
Bit R/W (Read/Write) : seul 2 valeur, appauvrissement par rapport à la segmentation
	
TLB (Translation Lookaside Buffers) : "cache" pour retenir les correspondances (éviter la retraduction)

Sous linux : (adressage virtuel)

0go__________________________3go___________4go
[	U=1 (user)            |U=0(kernel)   ]
''''''''''''''''''''''''''''''''''''''''''''''

Sous windows, plutôt 2 go
Quand une application s'exécute, elle va devoir faire des appels systèmes et donc accéder à la mémoire du noyau (pas n'importe comment), donc logique que la mémoire du noyau soit mappée aussi dans la mémoire du processus.

Dans chaque application, les dernières entrées du PageDirectory correspondront donc aux pages du noyau

Ca aurait du sens que le bit G soit à 1 pour les pages du kernel
Sous linux, adresse virtuelle au delà de 3 go (dans l'espace noyau) codé à partir de l'adresse 0 en RAM (donc on peut faire la correspondance physique (à partir de CR3 par ex) => virtuelle rapidement) ==> Utilisé pour accéder aux adresses virtuelles des tables de page par ex

ON PEUT MODIFIER LE PAGE DIRECTORY LUI MÊME

Si on met à la première adresse du page directory l'adresse du page directory lui même
			______
		00 ____/___   |
00000000 -------> |   v  __|__|
		  |________|
		  |	   |
		  |________|
		  |  ...   |


Juste à mettre un offset pour modifier les autres cases
